<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>sessionStorage移动端兼容问题</title>
      <link href="/2018/09/13/87feece5/"/>
      <url>/2018/09/13/87feece5/</url>
      
        <content type="html"><![CDATA[<h1 id="关于sessionStorage的移动端兼容问题"><a href="#关于sessionStorage的移动端兼容问题" class="headerlink" title="关于sessionStorage的移动端兼容问题"></a>关于sessionStorage的移动端兼容问题</h1><p>最近在开发移动端项目时，需要用到的本地存储的地方不少。都是一些只要记住当前打开窗口的用户数据就行，所以我选择用的sessionStorage。使用场景如下：</p><blockquote><p>A.html页面需要记录一条数据{a:1,b:2};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(&quot;data&quot;,&quot;&#123;a:1,b:2&#125;&quot;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>B.html页面取出使用;</p></blockquote><p><code>sessionStorage.getItem(&quot;data&quot;); // 获取结果为null</code></p><p>问题：如果项目不是单页面复应用，AB是两个html文件，需要跳转href的。我们会发现有些Andiron系统的浏览器在B页获取是到的结果是null (如：vivo手机自带的世界之窗浏览器)。</p><p>经过分析，其实这并不是这个浏览器不支持sessionStorage，因为你还是能获取到sessionStorage这个对象的。而是<strong>因为sessionStorage是一个当前窗口的数据存储格式，有些浏览器在跳转新页面的时候他系统是打开了一个新的webView，把原来的关了,也就相当于我们在浏览器打开了一个新窗口。这样他就跟我们的sessionStorage原理冲突了，在新页面当然就获取不到咯。</strong>  所以建议大家做移动端的时候如果不是单页面复应用的的项目最好不要使用sessionStorage。慎用！</p><h2 id="sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开"><a href="#sessionStorage-的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开" class="headerlink" title="sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开"></a>sessionStorage 的数据会在同一网站的多个标签页之间共享吗？这取决于标签页如何打开</h2><p>一直以来，我所以为的 sessionStorage 的生命周期是这样的：在 sessionStorage 中存储的数据会在当前浏览器的同一网站的多个标签页中共享，并在此网站的最后一个标签页被关闭后清除。注意：这是错误的。</p><p>我之所以会这么认为，是因为我写代码的时候，sessionStorage 给我的表现就是这样的。</p><p>假设我们有一个 index.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用一个新标签页打开自身，并设置一个 sessionStorage --&gt;</span><br><span class="line">&lt;a href=&quot;index.html&quot; target=&quot;_blank&quot; onclick=&quot;sessionStorage.setItem(&apos;j&apos;, &apos;s&apos;)&quot;&gt;</span><br><span class="line">  open myself</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>接下来：</p><ol><li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <code>http://localhost/index.html</code></li><li>点击页面上的链接，此时会弹出来标签页 B。</li><li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)<br>控制台会输出 ‘s’，这说明标签页 A 和 B 共享了 sessionStorage 中的数据；接下来，先关闭这两个标签页，然后再打开一个标签页 C，再读取一下 j 的值，得到的是 null。</li></ol><p>这看起来跟本文一开始的说法是一致的，但今天我遇到了一个奇怪的事情……</p><p>我们给上面的步骤添加第四步：</p><ol><li>在浏览器中打开这个 index.html，我们称之为标签页 A。注意：需要用 http 协议打开！例如 <a href="http://localhost/index.html" target="_blank" rel="noopener">http://localhost/index.html</a></li><li>点击页面上的链接，此时会弹出来标签页 B。</li><li>在标签页 B 中打开控制台并执行 sessionStorage.getItem(‘j’)，得到 ‘s’</li><li>新建一个新标签页 D，然后在地址栏内输入 <a href="http://localhost/index.html" target="_blank" rel="noopener">http://localhost/index.html</a> 打开同样的页面， 然后执行 sessionStorage.getItem(‘j’) 。</li></ol><p>按照我的预期，标签页 D 得到的应该还是 ‘s’，毕竟我认为 sessionStorage 的数据是在同一网站的多个标签页之间共享的。但是我错了，得到的结果是 null。</p><p>发生了什么？为什么标签页 B 中得到的是 ‘s’，为什么标签页 D 中却是 null？</p><p>细心的同学可能已经发现了，<strong>标签页 B 和标签页 D 之间唯一的不同就是它们被打开的方式：标签页 B 是通过在标签页 A 中点击链接打开的，但标签页 D 是在浏览器地址栏输入地址打开的。</strong></p><p>我赶紧上 MDN 查了一下，上面是这么说的：</p><blockquote><p>…data stored in sessionStorage gets cleared when the page session ends…Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.</p></blockquote><p>所以现在我明白了：通过点击链接（或者用了 window.open）打开的新标签页之间是属于同一个 session 的，但新开一个标签页总是会初始化一个新的 session，即使网站是一样的，它们也不属于同一个 session。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现跨域请求的几种方式</title>
      <link href="/2018/07/03/a27e515f/"/>
      <url>/2018/07/03/a27e515f/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote><p>基本概念</p></blockquote><h3 id="源（origin）就是协议、域名和端口号。"><a href="#源（origin）就是协议、域名和端口号。" class="headerlink" title="源（origin）就是协议、域名和端口号。"></a>源（origin）就是协议、域名和端口号。</h3><p><a href="http://www.company.com:80" target="_blank" rel="noopener">http://www.company.com:80</a><br>协议：http<br>域名：<a href="http://www.company.com" target="_blank" rel="noopener">www.company.com</a><br>端口号：80</p><h3 id="同源策略-1"><a href="#同源策略-1" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p><blockquote><p>不受同源策略限制的：</p><ol><li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li><li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</code>等。</li></ol></blockquote><h2 id="跨域的实现"><a href="#跨域的实现" class="headerlink" title="跨域的实现"></a>跨域的实现</h2><h3 id="1-图片ping或script标签跨域"><a href="#1-图片ping或script标签跨域" class="headerlink" title="1. 图片ping或script标签跨域"></a>1. 图片ping或script标签跨域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 图片ping</span><br><span class="line">function imgPing(url) &#123;</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = url;</span><br><span class="line">    img.onload = function () &#123;</span><br><span class="line">        console.log(`img-url:$&#123;url&#125;...success`)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = function () &#123;</span><br><span class="line">        console.error(`img-url:$&#123;url&#125;...faild`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//script标签跨域</span><br></pre></td></tr></table></figure><p>图片ping常用于跟踪用户点击页面或动态广告曝光次数。<br>script标签可以得到从其他来源数据，这也是JSONP依赖的根据。 </p><blockquote><p>缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）</p></blockquote><h3 id="2-JSONP跨域"><a href="#2-JSONP跨域" class="headerlink" title="2. JSONP跨域"></a>2. JSONP跨域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function addScriptTag(src) &#123; </span><br><span class="line">    var script = document.createElement(&apos;script&apos;); </span><br><span class="line">    script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;); </span><br><span class="line">    script.src = src; </span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//window.onload是为了让页面加载完成后再执行</span><br><span class="line">window.onload = function () &#123; </span><br><span class="line">    addScriptTag(&apos;http://b.com/main.js?callback=foo&apos;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">function foo(data) &#123; </span><br><span class="line">    console.log(data.name+&quot;欢迎您&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用jsonp跨域也存在问题：</p><ol><li>使用这种方法，只要是个网站都可以拿到b.com里的数据，存在安全性问题。<code>需要网站双方商议基础token的身份验证，这里不详述</code>。</li><li>只能是GET，不能POST。</li><li>可能被注入恶意代码，篡改页面内容，可以采用字符串过滤来规避此问题。</li></ol><h3 id="3-CORS"><a href="#3-CORS" class="headerlink" title="3. CORS"></a>3. CORS</h3><p>​ Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，<code>CORS</code>除了<code>GET</code>要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure></p><h3 id="4-window-name-iframe"><a href="#4-window-name-iframe" class="headerlink" title="4. window.name+iframe"></a>4. window.name+iframe</h3><p><code>window.name</code>通过在<code>iframe</code>（一般动态创建）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给<code>window.name</code>。然后，请求者可以检索<code>window.name</code>值作为响应。</p><pre><code>- iframe标签的跨域能力；- window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。</code></pre><p>每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。</iframe></p><h3 id="5-window-postMessage"><a href="#5-window-postMessage" class="headerlink" title="5. window.postMessage()"></a>5. window.postMessage()</h3><p>HTML5新特性，可以用来向其他所有的<code>window</code>对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送<code>MessageEvent</code>，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p><h3 id="6-修改document-domain跨子域"><a href="#6-修改document-domain跨子域" class="headerlink" title="6. 修改document.domain跨子域"></a>6. 修改document.domain跨子域</h3><p><strong>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域</strong></p><p>​ 在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在<code>”aaa.xxx.com”</code>域内，可以把<code>domain</code>设置为<code>“xxx.com”</code>但不能设置为 <code>“xxx.org”</code>或者<code>”com”</code>。</p><p>​ 现在存在两个域名<code>aaa.xxx.com</code>和<code>bbb.xxx.com</code>。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将<code>document.name = &#39;xxx.com&#39;</code>;设置一致，来达到互相访问的作用。</p><h3 id="7-websocket"><a href="#7-websocket" class="headerlink" title="7. websocket"></a>7. websocket</h3><p>WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时<code>允许跨域通讯</code></p><p><strong>需要注意：</strong>WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。</p><h3 id="8-代理"><a href="#8-代理" class="headerlink" title="8. 代理"></a>8. 代理</h3><p>同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题</p><p>DomainA客户端（浏览器） ==&gt; DomainA服务器 ==&gt; DomainB服务器 ==&gt; DomainA客户端（浏览器）</p>]]></content>
      
      
      
        <tags>
            
            <tag> JSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>window.requestAnimationFrame使用</title>
      <link href="/2018/06/26/6ff4728c/"/>
      <url>/2018/06/26/6ff4728c/</url>
      
        <content type="html"><![CDATA[<h2 id="先看MDN文档："><a href="#先看MDN文档：" class="headerlink" title="先看MDN文档："></a>先看MDN文档：</h2><p>window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p><blockquote><p>注意：若您想要在下次重绘时产生另一个动画画面，您的回调例程必须调用 requestAnimationFrame()。</p></blockquote><p>当你需要更新屏幕画面时就可以调用此方法。在浏览器下次重绘前执行回调函数。回调的次数通常是每秒60次，但大多数浏览器通常匹配 W3C 所建议的刷新频率。在大多数浏览器里，当运行在后台标签页或者隐藏的&lt;iframe&gt; 里时，requestAnimationFrame() 会暂停调用以提升性能和电池寿命。</p><p>回调函数会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame() 排序的回调函数被触发的时间。即使每个回调函数的工作量的计算都花了时间，单个帧中的多个回调也都将被传入相同的时间戳。该时间戳是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。   </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.requestAnimationFrame(callback)</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><p>callback<br>一个指定函数的参数，该函数在下次重新绘制动画时调用。这个回调函数<code>只有一个传参</code>，<code>DOMHighResTimeStamp</code>，指示<code>requestAnimationFrame()</code> 开始触发回调函数的当前时间（<code>performance.now()</code> 返回的时间）。</p><blockquote><p>返回值</p></blockquote><p>一个 <code>long</code> 整数，请求 ID ，是回调列表中<code>唯一的标识</code>。是个非零值，没别的意义。你可以传这个值给 <code>window.cancelAnimationFrame()</code> 以取消回调函数。</p><p>比如： 写一个进度条</p><blockquote><p>html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;requestAnimationFrame-test&quot; style=&quot;width: 1px;height: 18px;background: #666;&quot;&gt;0%&lt;/div&gt;</span><br><span class="line">&lt;button onclick=&quot;run()&quot;&gt;Run&lt;/button&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>javascript<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame</span><br><span class="line">var start = 0;</span><br><span class="line">var ele = document.getElementById(&apos;requestAnimationFrame-test&apos;);</span><br><span class="line">var progress = 0</span><br><span class="line"></span><br><span class="line">function step(timestamp) &#123;</span><br><span class="line">    progress += 1;</span><br><span class="line">    ele.style.width = progress+&apos;%&apos;;</span><br><span class="line">    ele.innerHTML = progress+&apos;%&apos;;</span><br><span class="line">    if(progress &lt; 100) &#123;</span><br><span class="line">        requestAnimationFrame(step)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function run() &#123;</span><br><span class="line">    ele.style.width = &quot;1px&quot;;</span><br><span class="line">    progress = 0;</span><br><span class="line">    requestAnimationFrame(step);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>demo: <a href="https://sansanshow.github.io/fe-notes/examples/html/requestAnimationFrame.html" target="_blank" rel="noopener">点击查看</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PC端JS打开摄像头并拍照</title>
      <link href="/2018/06/22/73f78475/"/>
      <url>/2018/06/22/73f78475/</url>
      
        <content type="html"><![CDATA[<h1 id="PC端JS打开摄像头并拍照"><a href="#PC端JS打开摄像头并拍照" class="headerlink" title="PC端JS打开摄像头并拍照"></a>PC端JS打开摄像头并拍照</h1><h2 id="主要步骤及要点"><a href="#主要步骤及要点" class="headerlink" title="主要步骤及要点"></a>主要步骤及要点</h2><ol><li><p>打开摄像头主要用到getUserMedia方法，然后将获取到的媒体流置入video标签</p></li><li><p>截取图片主要用到canvas绘图，使用drawImage方法将video的内容绘至canvas中</p></li><li><p>将截取的内容上传至服务器，将canvas中的内容转为base64格式上传，后端（PHP）通过file_put_contents将其转为图片</p></li></ol><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;JS调用摄像头并拍照&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        video &#123;  </span><br><span class="line">            border: 1px solid #ccc;  </span><br><span class="line">            display: block;  </span><br><span class="line">            margin: 0 0 20px 0;  </span><br><span class="line">            float:left;  </span><br><span class="line">        &#125;  </span><br><span class="line">        #canvas &#123;  </span><br><span class="line">            margin-top: 20px;  </span><br><span class="line">            border: 1px solid #ccc;  </span><br><span class="line">            display: block;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;video id=&quot;video&quot; width=&quot;500&quot; height=&quot;400&quot; autoplay&gt;&lt;/video&gt;</span><br><span class="line">    &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;button id=&quot;snap&quot;&gt;拍照&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;close&quot;&gt;关闭&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;upload&quot;&gt;上传&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="javascript-部分"><a href="#javascript-部分" class="headerlink" title="javascript 部分"></a>javascript 部分</h2><h3 id="1-打开摄像头"><a href="#1-打开摄像头" class="headerlink" title="1. 打开摄像头"></a>1. 打开摄像头</h3><p><strong>getUserMedia有新旧版本：</strong></p><h4 id="旧版本位于navigator下面"><a href="#旧版本位于navigator下面" class="headerlink" title="- 旧版本位于navigator下面"></a>- 旧版本位于<code>navigator</code>下面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 获取媒体方法 </span><br><span class="line">navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class="line"></span><br><span class="line">if(navigator.getMedia) &#123;</span><br><span class="line">    navigator.getMedia(&#123;</span><br><span class="line">        video: true,</span><br><span class="line">        audio: true</span><br><span class="line">    &#125;, function(stream) &#123;</span><br><span class="line">        // 用来获取停止摄像头的方法所在的对象</span><br><span class="line">        // 这个写法其实是兼容了&lt;在旧版本中可以直接通过调用`MediaStream.stop()` 来关闭摄像头，不过在新版之中已废弃。需要使用`MediaStream.getTracks()[index].stop()` 来关闭相应的Track&gt;</span><br><span class="line">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1]; </span><br><span class="line"></span><br><span class="line">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class="line">        videoEle.play();</span><br><span class="line">    &#125;, function(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getUserMedia参数说明</p><ol><li>第一个参数中指示需要使用视频（video）或音频（audio）</li><li>第二个参数调用成功后的回调,其中带一个参数（MediaStream）。在旧版本中可以直接通过调用<code>MediaStream.stop()</code> 来关闭摄像头，不过在新版之中已废弃。需要使用<code>MediaStream.getTracks()[index].stop()</code> 来关闭相应的Track<br>比如：新版中关闭video则根据第一个参数index=0,使用MediaStream.getTracks()[0].stop()</li></ol></blockquote><ol start="3"><li>第三个参数指示调用失败后的回调</li></ol><h4 id="新版本位于navigator-mediaDevices-对象下"><a href="#新版本位于navigator-mediaDevices-对象下" class="headerlink" title="- 新版本位于navigator.mediaDevices 对象下"></a>- 新版本位于navigator.mediaDevices 对象下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMeida)&#123;</span><br><span class="line">    navigator.mediaDevices.getUserMeida(&#123;</span><br><span class="line">        video: true,</span><br><span class="line">        audio: true</span><br><span class="line">    &#125;).then(function(stream) &#123;</span><br><span class="line">        mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class="line">        videoEle.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class="line">        videoEle.play();</span><br><span class="line">    &#125;).catch(function(err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与旧版类似，不过该方法返回了一个Promise对象，可以使用then和catch表示成功与失败的回调</p><p><strong>另外</strong>，需要注意的是，MediaStream.getTracks() 返回的Tracks数组是按第一个参数倒序排列的</p><p>比如现在定义了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    video: true,</span><br><span class="line">    audio: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>想关闭摄像头，就需要调用MediaStream.getTracks()[1].stop();</p><p>同理，0对应于audio的track</p><h3 id="2-摄像头操作"><a href="#2-摄像头操作" class="headerlink" title="2. 摄像头操作"></a>2. 摄像头操作</h3><h4 id="0-首先初始化画布"><a href="#0-首先初始化画布" class="headerlink" title="0. 首先初始化画布"></a>0. 首先初始化画布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var context = canvas.getContext(&quot;2d&quot;); </span><br><span class="line">var canvesEle = document.getElementById(&quot;canves&quot;);</span><br><span class="line">var videoEle = document.getElementById(&quot;video&quot;);</span><br></pre></td></tr></table></figure><h4 id="1-拍照"><a href="#1-拍照" class="headerlink" title="1. 拍照"></a>1. 拍照</h4><p>document.getElementById(“snap”).addEventListener(‘click’, function(e){<br>    context.drawImage(videoEle, 0, 0, 500, 400);<br>})</p><h4 id="2-关闭摄像头"><a href="#2-关闭摄像头" class="headerlink" title="2. 关闭摄像头"></a>2. 关闭摄像头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关闭摄像头</span><br><span class="line">close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">    mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure><h4 id="3-图像上传获取"><a href="#3-图像上传获取" class="headerlink" title="3. 图像上传获取"></a>3. 图像上传获取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas.toDataURL(&apos;image/png&apos;)</span><br></pre></td></tr></table></figure><h3 id="完整js"><a href="#完整js" class="headerlink" title="完整js"></a>完整js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function $(elem) &#123;</span><br><span class="line">        return document.querySelector(elem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取媒体方法（旧方法）</span><br><span class="line">    navigator.getMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMeddia || navigator.msGetUserMedia;</span><br><span class="line"></span><br><span class="line">    var canvas = $(&apos;canvas&apos;),</span><br><span class="line">        context = canvas.getContext(&apos;2d&apos;),</span><br><span class="line">        video = $(&apos;video&apos;),</span><br><span class="line">        snap = $(&apos;#snap&apos;),</span><br><span class="line">        close = $(&apos;#close&apos;),</span><br><span class="line">        upload = $(&apos;#upload&apos;),</span><br><span class="line">        uploaded = $(&apos;#uploaded&apos;),</span><br><span class="line">        mediaStreamTrack;</span><br><span class="line"></span><br><span class="line">    // 获取媒体方法（新方法）</span><br><span class="line">    // 使用新方法打开摄像头</span><br><span class="line">    if (navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line">        navigator.mediaDevices.getUserMedia(&#123;</span><br><span class="line">            video: true,</span><br><span class="line">            audio: true</span><br><span class="line">        &#125;).then(function(stream) &#123;</span><br><span class="line">            console.log(stream);</span><br><span class="line"></span><br><span class="line">            mediaStreamTrack = typeof stream.stop === &apos;function&apos; ? stream : stream.getTracks()[1];</span><br><span class="line"></span><br><span class="line">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class="line">            video.play();</span><br><span class="line">        &#125;).catch(function(err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用旧方法打开摄像头</span><br><span class="line">    else if (navigator.getMedia) &#123;</span><br><span class="line">        navigator.getMedia(&#123;</span><br><span class="line">            video: true</span><br><span class="line">        &#125;, function(stream) &#123;</span><br><span class="line">            mediaStreamTrack = stream.getTracks()[0];</span><br><span class="line"></span><br><span class="line">            video.src = (window.URL || window.webkitURL).createObjectURL(stream);</span><br><span class="line">            video.play();</span><br><span class="line">        &#125;, function(err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 截取图像</span><br><span class="line">    snap.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        context.drawImage(video, 0, 0, 500, 400);</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    // 关闭摄像头</span><br><span class="line">    close.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        mediaStreamTrack &amp;&amp; mediaStreamTrack.stop();</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">    // 上传截取的图像</span><br><span class="line">    upload.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">        jQuery.post(&apos;/uploadSnap.php&apos;, &#123;</span><br><span class="line">            snapData: canvas.toDataURL(&apos;image/png&apos;)</span><br><span class="line">        &#125;).done(function(rs) &#123;</span><br><span class="line">            rs = JSON.parse(rs);</span><br><span class="line"></span><br><span class="line">            console.log(rs);</span><br><span class="line"></span><br><span class="line">            uploaded.src = rs.path;</span><br><span class="line">        &#125;).fail(function(err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, false);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href="https://caniuse.com/#search=getUserMedia" target="_blank" rel="noopener">getUserMedia支持情况-不容乐观：点击查看</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS控制CSS3，添加浏览器兼容前缀</title>
      <link href="/2018/05/13/4e8f9d20/"/>
      <url>/2018/05/13/4e8f9d20/</url>
      
        <content type="html"><![CDATA[<p>不同的浏览器对于有些css3属性名定义的时候，会加上一些前缀，比如<code>transform</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div</span><br><span class="line">&#123;</span><br><span class="line">    transform: rotate(30deg);</span><br><span class="line">    -ms-transform: rotate(30deg);        /* IE 9 */</span><br><span class="line">    -webkit-transform: rotate(30deg);    /* Safari and Chrome */</span><br><span class="line">    -o-transform: rotate(30deg);        /* Opera */</span><br><span class="line">    -moz-transform: rotate(30deg);        /* Firefox */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有时候我们通过js控制css3属性。</p><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var sty = document.createElement(&quot;div&quot;).style;</span><br></pre></td></tr></table></figure><p>通过chrome控制台打印出来的是这样的<br><img src="/images/1/style.png" alt="document.createElement(&quot;div&quot;).style"></p><h3 id="遍历样式表"><a href="#遍历样式表" class="headerlink" title="遍历样式表"></a>遍历样式表</h3><p>现在前缀主要有这四种：webkit,moz,o,ms<br>通过遍历来匹配对应的前缀并返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这个函数用来判断浏览器前缀</span><br><span class="line"> * 返回standard表示不需要前缀</span><br><span class="line"> * @param &#123;string&#125; prop </span><br><span class="line"> */</span><br><span class="line">function vendor(prop) &#123;</span><br><span class="line">    // 处理有中划线(-)分隔开的属性，事实上是以驼峰命名法</span><br><span class="line">    let afterProp = transformCamels(prop);</span><br><span class="line">    let transformNames = &#123;</span><br><span class="line">        webkit: `webkit$&#123;afterProp&#125;`,</span><br><span class="line">        moz: `moz$&#123;afterProp&#125;`,</span><br><span class="line">        ms: `ms$&#123;afterProp&#125;`,</span><br><span class="line">        o: `o$&#123;afterProp&#125;`,</span><br><span class="line">        standard: `$&#123;prop&#125;`</span><br><span class="line">    &#125;</span><br><span class="line">    for(var key in transformNames) &#123;</span><br><span class="line">        if(elementStyle[transformNames[key]] !== undefined) &#123;</span><br><span class="line">            return key;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transformCamels(prop)&#123;</span><br><span class="line">    let camels = prop.split(&apos;-&apos;);</span><br><span class="line">    camels.forEach((item, index) =&gt; &#123;</span><br><span class="line">        camels[index] = item.charAt(0).toUpperCase() + item.substr(1);</span><br><span class="line">    &#125;)</span><br><span class="line">    let afterProp = camels.join(&apos;&apos;);</span><br><span class="line">    return afterProp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>封装成函数就可以使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function prefixStyle(style) &#123;</span><br><span class="line">    let prefix = vendor(style);</span><br><span class="line">    if(prefix === false) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(prefix === &apos;standard&apos;) &#123;</span><br><span class="line">        return style;</span><br><span class="line">    &#125;</span><br><span class="line">    return prefix + style.charAt(0).toUpperCase() + style.substr(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="/images/1/test.png" alt="测试结果"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="./js-add-css3-prefixer.js">完整代码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>简历</title>
      <link href="/my/index.html"/>
      <url>/my/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="马伟强"><a href="#马伟强" class="headerlink" title="马伟强"></a>马伟强</h2><h3 id="基本资料"><a href="#基本资料" class="headerlink" title="基本资料"></a>基本资料</h3><hr><ul><li><strong>概况</strong>：<code>3年以上工作经验</code> | 男 | 28岁(1990年3月)  <strong>地址</strong>：上海浦东</li><li><strong>电话</strong>：<code>18016375545</code>  </li><li><strong>E-mail</strong>： <a href="mailto:`sansan_show@126.com" target="_blank" rel="noopener">`sansan_show@126.com</a>`</li><li><strong>职位</strong>：web前端工程师</li><li><strong>学校</strong>：山西农业大学  <strong>学历</strong>：本科 <strong>专业</strong>：计算机科学与技术</li></ul><h3 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h3><hr><ul><li>能够语义化的编写HTML文档；了解HTML5新特性；熟悉<code>CSS2.1</code>，<code>CSS3</code>规范；熟练使用<code>sass</code>, <code>less</code>等进行开发;</li><li>熟练使用es5/es6开发；熟练使用<code>jQuery</code>, <code>Zepto</code>等js库；熟练使用<code>vuejs</code>开发，了解<code>nuxt</code>服务端渲染；熟悉<code>backbone</code>,<code>React</code>等框架进行开发；熟练微信<code>小程序</code>开发, 了解<code>mpvue</code>开发；</li><li>了解webpack,gulp等构建工具的使用；熟练使用git,svn等版本控制工具协同完成开发；</li><li>熟悉Java后端开发语言，熟练使用SpringMVC，Spring，Hibernate，Struts2/MyBatis等主流开源框架，了解B/S开发；</li><li>了解android及<code>React Native</code>开发; 了解<code>flutter移动端开发</code>；</li><li>了解<code>linux</code>命令;</li></ul><h3 id="求职意向"><a href="#求职意向" class="headerlink" title="求职意向"></a>求职意向</h3><hr><ul><li><strong>到岗时间</strong>：一个月内                <strong>工作性质</strong>：全职</li><li><strong>期望行业</strong>：移动互联网/电子商务/金融/教育 <strong>目标地点</strong>：上海</li><li><strong>期望薪资</strong>：年薪25W+s</li><li><strong>目标职能</strong>：Web高级前端开发工程师</li><li><strong>求职状态</strong>：观望有好的机会再考虑。</li></ul>]]></content>
      
    </entry>
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
